1.	Numbers
	1. / : 浮点除法 // ： 取整除法
	2. 在交互模式下，_表示屏幕最后一次输出的结果
	3. python中使用 j或者J表示复数
	4.	**： 2**3=Math.Pow(2,3)=8;
2.	Strings
	1.	r: 输出原始的字符串，想当与C#中的@符号
	2.	"""或'''： 可以输出多行字符串
	3.	*： 重复输出字符串
	4.	+： 连接字符串
	5.	index:	 以0作为第一索引位
	6.	[startIndex:endIndex]:	string支持切片操作，string[1:3]长度为2
	7.	len(): 返回字符串长度
3.	Lists
	1.	slicing:	支持切片操作
	2.	concatenation:	 支持连接操作
	3.	Methods:
		1.	append(x):	向list末尾追加数据
		2.	extend(L)
		3.	insert(i,x)
		4.	remove(x)
		5.	pop([i])
		6.	index(x)
		7.	count(x)
		8.	sort()
		9.	reverse()
	4.	Function
		1.	filter(function,sequence)
		2.	map(function,sequence)
		3.	reduce(function,sequence)
	5.	List comprehensions
	6.	Del
4.	Loop:
	1.	while:
	2.	if...elif...else:
	3.	for x in Variables:
	4.	rang(Integer): 生成序列 range(start,stop[,step]),range(stop)
	5.	list(): return lists
5.	pass: does nothing
6.	Arguments:
	1.	In a function call, keyword arguments must follow positional arguments.
	2.	When a final formal parameter of the form **name is present, it receives a dictionary
	3.	Call with the *-operator to unpack the arguments out of a list or tuple
	4.	In the same fashion, dictionaries can deliver keyword arguments with the **-operator
7. 	str.join():  sep="."; sep.join("A","B","C") = A.B.C;
8.	Tuple
9.	Set
	1.	A set is an unordered collection with no duplicate elements.
10.	Dictionary
	1.	dict():	builds dictionaries directly from lists of key-value pairs stored as tuples.
11.	Looping
	1.	for ... in
	2.	zip
	3.	reversed
	4.	sorted